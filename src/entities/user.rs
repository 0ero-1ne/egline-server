//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use rocket::serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub display_name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
    pub avatar: Vec<u8>,
    pub saved_books: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::book_rate::Entity")]
    BookRate,
    #[sea_orm(has_many = "super::comment::Entity")]
    Comment,
    #[sea_orm(has_many = "super::comment_rate::Entity")]
    CommentRate,
}

impl Related<super::book_rate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BookRate.def()
    }
}

impl Related<super::comment_rate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CommentRate.def()
    }
}

impl Related<super::book::Entity> for Entity {
    fn to() -> RelationDef {
        super::book_rate::Relation::Book.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::book_rate::Relation::User.def().rev())
    }
}

impl Related<super::comment::Entity> for Entity {
    fn to() -> RelationDef {
        super::comment_rate::Relation::Comment.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::comment_rate::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
