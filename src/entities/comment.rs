//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "comment")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub book_id: i32,
    pub user_id: i32,
    pub chapter_id: i32,
    pub text: String,
    pub upvotes: i32,
    pub downvotes: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::book::Entity",
        from = "Column::BookId",
        to = "super::book::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Book,
    #[sea_orm(
        belongs_to = "super::chapter::Entity",
        from = "Column::ChapterId",
        to = "super::chapter::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chapter,
    #[sea_orm(has_many = "super::comment_rate::Entity")]
    CommentRate,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::book::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Book.def()
    }
}

impl Related<super::chapter::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chapter.def()
    }
}

impl Related<super::comment_rate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CommentRate.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::comment_rate::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::comment_rate::Relation::Comment.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
