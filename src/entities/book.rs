//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize, ToSchema)]
#[sea_orm(table_name = "book")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    pub description: String,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
    pub cover: Vec<u8>,
    #[sea_orm(column_type = "Float")]
    pub rating: f32,
    pub year: i32,
    pub views: i32,
    pub status: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::book_author::Entity")]
    BookAuthor,
    #[sea_orm(has_many = "super::book_genre::Entity")]
    BookGenre,
    #[sea_orm(has_many = "super::book_rate::Entity")]
    BookRate,
    #[sea_orm(has_many = "super::chapter::Entity")]
    Chapter,
    #[sea_orm(has_many = "super::comment::Entity")]
    Comment,
}

impl Related<super::book_author::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BookAuthor.def()
    }
}

impl Related<super::book_genre::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BookGenre.def()
    }
}

impl Related<super::book_rate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BookRate.def()
    }
}

impl Related<super::chapter::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chapter.def()
    }
}

impl Related<super::comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comment.def()
    }
}

impl Related<super::author::Entity> for Entity {
    fn to() -> RelationDef {
        super::book_author::Relation::Author.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::book_author::Relation::Book.def().rev())
    }
}

impl Related<super::genre::Entity> for Entity {
    fn to() -> RelationDef {
        super::book_genre::Relation::Genre.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::book_genre::Relation::Book.def().rev())
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::book_rate::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::book_rate::Relation::Book.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
